---
---

<script is:inline>
function formatSection(value) {
  const section = value.slice(1);

  // Simple toTitleCase is sufficient :)
  const firstCharacter = section.charAt(0);
  const rest = section.slice(1);

  return firstCharacter.toUpperCase() + rest.toLowerCase();
}

function handleScroll(value) {
  const index = states.indexOf(state);
  const nextIndex = (index + value) % states.length;
  const oldState = state;
  const newState = states[nextIndex];
  state = newState;

  const oldElement = document.querySelector(oldState);
  const newElement = document.querySelector(newState);

  // Give a slight moment to let the DOM realise the element is no longer hidden.
  if (value === 1) {
    // scroll left
    oldElement.classList.add("left");
    newElement.classList.remove("right");
  } else if (value === -1) {
    // scroll right
    oldElement.classList.add("right");
    newElement.classList.remove("left");
  }

  const buttonRight = document.querySelector("#button-right");
  const buttonLeft = document.querySelector("#button-left");
  if (nextIndex === 0) {
    buttonRight.classList.add("hide");
  } else {
    buttonRight.classList.remove("hide");
    buttonRight.innerText = formatSection(states[nextIndex - 1]);
  }
  if (nextIndex === states.length - 1) {
    buttonLeft.classList.add("hide");
  } else {
    buttonLeft.classList.remove("hide");
    buttonLeft.innerText = formatSection(states[nextIndex + 1]);
  }

  const sectionHeading = document.querySelector('#edu-heading');
  
  switch (newState) {
    case "#teaching":
      sectionHeading.innerText = "Education: Courses Taught";
      break;
    case "#summary":
      sectionHeading.innerText = "Education";
      break;
    case "#courses":
      sectionHeading.innerText = "Education: Courses Taken";
      break;
  }
}

// Ensure that the states here correspond to the cards below.
const states = [
  "#teaching",
  "#summary",
  "#courses",
];
let state = "#summary";

addEventListener("load", () => {
  // Read query parameters.
  const urlSearchParams = new URLSearchParams(window.location.search);
  const params = Object.fromEntries(urlSearchParams.entries());

  const section = params.section;
  const initialState = `#${section}`;
  if (section === undefined || !states.includes(initialState)) {
    return;
  }

  switch (initialState) {
    case "#teaching":
      handleScroll(-1);
      break;
    case "#courses":
      handleScroll(1);
      break;
  }
});
</script>

<script>
function eduResizeHeight() {
  const root = document.querySelector(":root");
  root.style.setProperty("--edu-card-height", "0px");

  const card = document.querySelector("#summary");
  const height = card.scrollHeight;

  root.style.setProperty("--edu-card-height", `${height}px`);
}

addEventListener("resize", eduResizeHeight)
eduResizeHeight();
</script>

<section class="section-global section" id="edu">
  <div class="container-global container">
    <h2 id="edu-heading">Education</h2>
    <div class="card-container">
      <div class="button-wrapper">
        <button class="button-global button" id="button-right" onclick="handleScroll(-1)">Teaching</button>
      </div>
      <div class="card left" id="teaching">
        <div class="space">
          <h3>Software Engineering (CS2103T)</h3>
          <span>Fall 2023</span>
        </div>
        <ul class="summary-list-global">
          <li>An introductory course for systematic and rigorous development of software systems, covering main areas of software development.</li>
          <li>Tutored class of 10, including conducting weekly tutorials.</li>
        </ul>
        <div class="space">
          <h3>Data Structures & Algorithms (CS2040S)</h3>
          <span>Spring 2023</span>
        </div>
        <ul class="summary-list-global">
          <li>An introductory course for the design and implementation of fundamental data structures and algorithms, taught with Java.</li>
          <li>Tutored class of 15, including conducting weekly tutorials, grading weekly problem sets and consultations.</li>
          <li>Assisted in preparation of course materials.</li>
        </ul>
      </div>
      <div class="card" id="summary">
        <div class="space">
          <h3>National University of Singapore, Singapore</h3>
          <span>August 2021 - Dec 2024</span>
        </div>
        <h4>Bachelor of Computing (Honours) in Computer Science</h4>
        <p>Focus Areas in Database Systems and Parallel Computing</p>
        <ul class="summary-list-global">
          <li>Grade Point Average: 4.75 / 5.00</li>
          <li>Achieved Dean's List for Academic Year 2021 / 2022 Semester 2</li>
          <li>Awarded Top Students for:</li>
          <ul class="summary-list-global">
            <li>Programming Methodology (CS1101S)</li>
            <li>Programming Methodology II (CS2030S)</li>
          </ul>
        </ul>
      </div>
      <div class="card right" id="courses">
        <h3>Computer Science Fundamentals</h3>
        <ul class="summary-list-global">
          <li>Programming Methodology (CS1101S)</li>
          <li>Discrete Mathematics (CS1231S)</li>
          <li>Programming Methodology II (CS2030S)</li>
          <li>Data Structures & Algorithms (CS2040S)</li>
          <li>Computer Organisation (CS2100)</li>
          <li>Introduction to Operating Systems (CS2106)</li>
          <li>Introduction to AI and Machine Learning (CS2109S)</li>
          <li>Design & Analysis of Algorithms (CS3230)</li>
        </ul>
        <h3>Computer Science Electives</h3>
        <ul class="summary-list-global">
          <li>Software Engineering (CS2103T)</li>
        </ul>
        <h3>Database Systems</h3>
        <ul class="summary-list-global">
          <li>Database Systems (CS2102)</li>
          <li>Database Systems Implementations (CS3223)</li>
          <li>Distributed Database Systems (CS4224)</li>
        </ul>
        <h3>Parallel Computing</h3>
        <ul class="summary-list-global">
          <li>Parallel Computing (CS3210)</li>
        </ul>
        <h3>Computer Networking</h3>
        <ul class="summary-list-global">
          <li>Introduction to Computer Networks (CS2105)</li>
          <li>Computer Networks Practice (CS3103)</li>
        </ul>
        <h3>Math and Statistics</h3>
        <ul class="summary-list-global">
          <li>Quantitative Reasoning with Data (GEA1000)</li>
          <li>Calculus in Computing (MA1521)</li>
          <li>Linear Algebra (MA2001)</li>
          <li>Probability and Statistics (ST2334)</li>
          <li>Multivariable Calculus (MA2104)</li>
        </ul>
      </div>
      <div class="button-wrapper">
        <button class="button-global button" id="button-left" onclick="handleScroll(1)">Courses</button>
      </div>
    </div>
  </div>
</section>

<style>
  :root {
    --edu-card-height: 0px;
  }

  .button-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .hide {
    display: none !important;
  }

  .button {
    display: block;
    width: 100%;
    margin-bottom: 1rem;
  }

  .card-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-gap: 0 1rem;
    overflow: hidden;
  }

  .card {
    grid-area: 2 / 1 / 3 / 3;

    display: block;
    max-width: 800px;

    transition: transform 0.6s cubic-bezier(0.65, 0.05, 0.36, 1);

    height: var(--edu-card-height);
    overflow-y: auto;
  }

  .left {
    transform: translateX(-150vw);
  }

  .right {
    transform: translateX(150vw);
  }

  #button-left::after {
    content: " ▸";
  }

  #button-right::before {
    content: "◂ "
  }

  /* for large screens */
  @media (min-width: 1000px) {
    .card-container {
      grid-template-columns: 50px 1fr 50px;
      grid-gap: 0;
    }

    .card {
      grid-area: 1 / 2 / 2 / 3;
      padding: 0 2rem;
    }

    .button {
      display: initial;
      width: initial;
      font-size: 100%;
    }

    #button-left {
      transform: rotate(90deg);
    }

    #button-right {
      transform: rotate(-90deg);
    }

    #button-left::after {
      content: none;
    }

    #button-right::before {
      content: none;
    }

    .space {
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
  }
</style>
